#if DEBUG
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading;
using UnityEngine;
using Object = UnityEngine.Object;
using UnityEngine.SceneManagement;

namespace Trainer
{
    public static class DoorstopLoader
    {
        //private static GameObject _Load;
        /*
        public static GameObject Load
        {
            get
            {
                return Loader._Load;
            }
            set
            {
                Loader._Load = value;
            }
        }
        */

        public static void Main(string[] args)
        {
            using (TextWriter textWriter = File.CreateText("TestTrainer.txt"))
            {
                textWriter.WriteLine("TestTrainer is alive and injected!");
                textWriter.WriteLine();
                textWriter.WriteLine(string.Format("This text file was generated by TestTrainer on {0:R}!", DateTime.Now));
                textWriter.WriteLine();
                textWriter.WriteLine("Command line: " + Environment.CommandLine);
                textWriter.WriteLine("Doorstop set the following environment variables:");
                textWriter.WriteLine("DOORSTOP_INVOKE_PATH = " + Environment.GetEnvironmentVariable("DOORSTOP_INVOKE_DLL_PATH"));
                textWriter.WriteLine("DOORSTOP_MANAGED_FOLDER_DIR = " + Environment.GetEnvironmentVariable("DOORSTOP_MANAGED_FOLDER_DIR"));
                textWriter.WriteLine("DOORSTOP_PROCESS_PATH = " + Environment.GetEnvironmentVariable("DOORSTOP_PROCESS_PATH"));
                textWriter.WriteLine();
                textWriter.WriteLine("Initializing Trainer:");
                textWriter.Flush();
            }

            DoorstopLoader.InitThreading();
        }

        public static void Init()
        {
            using (TextWriter textWriter = File.AppendText("TestTrainer.txt"))
            {
                textWriter.WriteLine("[Trainer] Init()");

                #region[Process & Domain Details]

                textWriter.WriteLine("");
                textWriter.WriteLine("[Trainer] Process & Domain Details:");
                textWriter.WriteLine("[Trainer]\tCurrent Process: " + Process.GetCurrentProcess().ProcessName);
                textWriter.WriteLine("[Trainer]\tCurrent Domain: " + AppDomain.CurrentDomain.FriendlyName);
                textWriter.Flush();

                #endregion

                #region[Load Game Assemblies]

                textWriter.WriteLine("");
                textWriter.WriteLine("[Trainer] Trying to Load Game Assemblies...");
                string[] gameassemblies = Directory.GetFiles(Environment.GetEnvironmentVariable("DOORSTOP_MANAGED_FOLDER_DIR"));
                foreach (var assembly in gameassemblies)
                {
                    if (assembly.EndsWith(".dll") && Path.GetFileNameWithoutExtension(assembly) != "mscorlib")
                    {
                        try
                        {
                            var tmpAsm = Assembly.LoadFrom(assembly);
                            //textWriter.WriteLine("[Trainer] Loaded Assembly: " + assembly);
                        }
                        catch (Exception ex)
                        {
                            textWriter.WriteLine("[Trainer] FAILED to Loaded Assembly: " + assembly);
                            textWriter.Flush();
                        }
                    }
                    textWriter.Flush();
                }

                textWriter.WriteLine("[Trainer] Assemblies:");
                var gos = AppDomain.CurrentDomain.GetAssemblies();
                foreach (var go in gos)
                {
                    textWriter.WriteLine("[Trainer]\t" + go.FullName);
                    textWriter.Flush();
                }

                #endregion

                #region[Test Unity Fuctionality]

                textWriter.WriteLine("");
                textWriter.WriteLine("[Trainer] Unity Functionality Checks:");

                #region[Test GameObject.Find()]

                textWriter.WriteLine("[Trainer]\tTesting GameObject.Find()...");
                textWriter.Flush();

                GameObject testgo = null;
                GameObject gobject = null;
                int errFind = 0;
                try
                {
                    testgo = new GameObject("Test");
                    gobject = GameObject.Find("Test");
                }
                catch
                {
                    errFind = 1;
                }

                if (errFind == 0) { textWriter.WriteLine("[Trainer]\tSUCCESS!"); } else { textWriter.WriteLine("[Trainer]\tFAILED!"); }
                textWriter.Flush();

                #endregion

                #region[Test GameObject.FindObjectOfType<>()]

                textWriter.WriteLine("[Trainer]\tTesting GameObject.FindObjectOfType<>()...");
                textWriter.Flush();

                GameObject gameObjectofType = null;
                int errObjectofType = 0;
                try
                {
                    gameObjectofType = GameObject.FindObjectOfType<GameObject>();
                }
                catch
                {
                    errObjectofType = 1;
                }

                if (errObjectofType == 0) { textWriter.WriteLine("[Trainer]\tSUCCESS!"); } else { textWriter.WriteLine("[Trainer]\tFAILED!"); }
                textWriter.Flush();

                #endregion

                #region[Test GameObject.FindObjectsOfType<>()]
                /*
                textWriter.WriteLine("[Trainer]\tTesting GameObject.FindObjectsOfType<>()...");
                textWriter.Flush();

                Renderer[] testFindObjects = null;
                int errFindObjects = 0;
                try
                {
                    testFindObjects = GameObject.FindObjectsOfType<Renderer>();
                }
                catch
                {
                    errFindObjects = 1;
                }

                if (errFindObjects == 0) { textWriter.WriteLine("[Trainer]\tSUCCESS!"); } else { textWriter.WriteLine("[Trainer]\tFAILED!"); }
                textWriter.Flush();
                */
                #endregion

                #region[Test GameObject.AddComponent<Renderer>()]

                textWriter.WriteLine("[Trainer]\tTesting GameObject.AddComponent<Renderer>()...");
                textWriter.Flush();

                Renderer testRenderer = null;
                int errRenderer = 0;
                try
                {
                    testRenderer = testgo.AddComponent<Renderer>();
                }
                catch
                {
                    errRenderer = 1;
                }

                if (errRenderer == 0) { textWriter.WriteLine("[Trainer]\tSUCCESS!"); } else { textWriter.WriteLine("[Trainer]\tFAILED!"); }
                textWriter.Flush();

                #endregion

                #endregion

                //textWriter.Flush();
            }

            #region[No support for GameObject in Doorstop yet]
            /*
            Loader._Load = new GameObject("TestTrainer");
            Loader._Load.AddComponent<Menu>();
            //Object.DontDestroyOnLoad(Loader._Load);

            using (TextWriter textWriter = File.AppendText("TestTrainer.txt"))
            {
                if (_Load == null)
                {
                    textWriter.WriteLine("[Trainer] Init() - _Load is NULL!");
                }
                else
                {
                    textWriter.WriteLine("[Trainer] Init() - SUCCESS...");

                    var comp = _Load.GetComponent<Menu>();
                    if (comp == null)
                    {
                        textWriter.WriteLine("[Trainer] Init() - Add Menu component FAILED!");
                    }
                    else
                    {
                        textWriter.WriteLine("[Trainer] Init() - Add Menu component, SUCCESS...");
                    }

                }
                textWriter.Flush();
            }
            */
            #endregion
        }

        private static void InitThreading()
        {
            using (TextWriter textWriter = File.AppendText("TestTrainer.txt"))
            {
                textWriter.WriteLine("[Trainer] InitThreading()");
                textWriter.Flush();
            }

            new Thread(delegate ()
            {
                Thread.Sleep(5000);
                DoorstopLoader.Init();
            }).Start();
        }

    }
}
#endif